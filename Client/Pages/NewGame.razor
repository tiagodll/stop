@page "/new-game"
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging
@using Stop.Shared
@inject NavigationManager NavigationManager
@implements System.IDisposable
@inject Blazored.LocalStorage.ILocalStorageService localStore


@if (CurrentGame == null)
{
    <h1>Create new game</h1>

    <input type="text" class="editable" @bind="Topic"/>
    <button class="btn btn-primary" @onclick="AddTopic">Add</button>

    <ul>
        @foreach (var topic in Topics)
        {
            <li>@topic - <button @onclick="@((e) => RemoveTopic(topic))">Remove</button></li>
        }
    </ul>

    <button class="btn btn-primary" @onclick="StartGame">Start game</button>
}
else
{
    var link = NavigationManager.ToAbsoluteUri($"/game/{CurrentGame.Id}?password={CurrentGame.Password}");
    
    <h1>New game</h1>
    <p><span>Url: @CurrentGame.Id</span><br>
        <span>Password: @CurrentGame.Password</span></p>
    <p>Link: <a href="@link">@link</a></p>
                                      
                                      
    <table>
        <thead>
        <th>Player</th>
        @foreach (var topic in CurrentGame.Topics)
        {
            <th>@topic</th>
        }
        <th>score</th>
        </thead>
        <tbody>
        @if (CurrentGame.Rounds.Count > 0)
        {
            foreach (var roundPlayer in CurrentGame.Rounds.Last().Players)
            {
                <tr>
                    <td>@roundPlayer.Key</td>
                    @foreach (var answer in @roundPlayer.Value.Answers)
                    {
                        <td>
                            @answer.Value
                            <input type="checkbox" />
                        </td>
                    }
                    <td>@roundPlayer.Value.Score</td>
                </tr>
            }
        }
        else
        {
            foreach (var player in CurrentGame.Players)
            {
                <tr>
                    <td>@player.Name</td>
                    @foreach (var topic in CurrentGame.Topics)
                    {
                        <td></td>
                    }
                </tr>
            }
        }
        
        </tbody>
    </table>
    
    
    <button class="btn btn-primary" @onclick="StartRound">Start round</button>
    <button class="btn btn-danger" @onclick="DeleteGame">Delete game</button>
}

@code {
    private HubConnection hubConnection;
    public string Topic { get; set; }
    public Stop.Shared.Game CurrentGame { get; set; }
    public List<string> Topics { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Topics = new List<string>();

        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/websocket")).Build();
        hubConnection.On<Stop.Shared.Game>("GameStarted", async (game) =>
        {
            CurrentGame = game;
            await localStore.SetItemAsync<string>("game_id", CurrentGame.Id);
            await localStore.SetItemAsync<string>("game_password", CurrentGame.Password);
            StateHasChanged();
        });
        hubConnection.On<Stop.Shared.Game>("GameLoaded", (game) =>
        {
            CurrentGame = game;
            StateHasChanged();
        });
        hubConnection.On<Stop.Shared.Game>("RoundStarted", (game) =>
        {
            CurrentGame = game;
            StateHasChanged();
        });
        hubConnection.On<Stop.Shared.Game>("JoinedGame", (game) =>
        {
            CurrentGame = game;
            StateHasChanged();
        });
        hubConnection.On<Stop.Shared.Game>("GameDeleted", async (x) =>
        {
            CurrentGame = null;
            await localStore.RemoveItemAsync("game_id");
            await localStore.RemoveItemAsync("game_password");
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        
        
        var gameId = await localStore.GetItemAsync<string>("game_id");
        var password = await localStore.GetItemAsync<string>("game_password");
        if(!string.IsNullOrWhiteSpace(gameId) && !string.IsNullOrWhiteSpace(password))
            await hubConnection.InvokeAsync("LoadGame", gameId, password);
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
        
    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

    private void AddTopic()
    {
        Topics.Add(Topic);
        Topic = "";
    }
    private void RemoveTopic(string topic)
    {
        Topics.Remove(topic);
    }
    
    private async void StartGame()
    {
        await hubConnection.InvokeAsync("StartGame", Topics);
    }
    
    private async void StartRound()
    {
        await hubConnection.InvokeAsync("StartRound", CurrentGame.Id);
    }

    private async void DeleteGame()
    {
        await hubConnection.InvokeAsync("DeleteGame", CurrentGame.Id, CurrentGame.Password);
    }


}
