@page "/game/{GameId}"
@using System.Linq
@using Stop.Shared
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@using Microsoft.AspNetCore.WebUtilities
@inject Blazored.LocalStorage.ILocalStorageService localStore
@using Microsoft.Extensions.Logging
@inject ILogger<Stop.Shared.Game> Logger

@if (!JoinedGame)
{
    <p><label>Join game: <input type="text" class="editable" @bind="GameId" /></label></p>
    <p><label>Password: <input type="text" class="editable" @bind="password" /></label></p>
    <p><label>Player name: <input type="text" class="editable" @bind="player.Name" /></label></p>
    <button class="btn btn-primary" @onclick="JoinGame">Join</button>
}
else if (Round == null)
{
    <p>waiting for round to start</p>
    <p><label>Player name: <input type="text" class="editable" @bind="Renamed" /></label></p>
    <button class="btn btn-primary" @onclick="RenamePlayer">Rename</button>
    <table class="table">
        <thead>
        <tr>
            <th>Topics</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var topic in Topics)
        {
            <tr>
                <td>@topic</td>
            </tr>
        }
        </tbody>
    </table>
}
else if (Round.Finished == false)
{
    <h1>Current Letter: <b>@Round.Letter</b></h1>
    <table class="table">
        <thead>
        <tr>
            <th>Topic</th>
            <th>Your Answer</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var topic in Topics)
        {
            <tr>
                <td>@topic</td>
                <td><input type="text" class="editable" @onchange="@(e => ChangeAnswer(e, topic))" /></td>
                <td>@Answers[@topic]</td>
            </tr>
        }
        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="FinishRound">Done!</button>
}
else
{
    <h1>Round finished. Letter: <b>@Round.Letter</b></h1>
    <table>
        <thead>
        <th>Player</th>
        @foreach (var topic in Topics)
        {
            <th>@topic</th>
        }
        <th>Score</th>
        </thead>
        <tbody>
        @foreach (var player in Players)
        {
            <tr>
                <td>@player</td>
                @foreach (var answer in Round.Answers[player])
                {
                    <td>@answer</td>
                }
                @* <td>@player.Value.Score</td> *@
            </tr>
        }
        </tbody>
    </table>
}

@if (!string.IsNullOrWhiteSpace(Alert))
{
    var alert_msg = Alert.Contains(":") ? Alert.Substring(Alert.IndexOf(":") + 1) : Alert;
    var alert_type = Alert.Contains(":") ? Alert.Substring(0, Alert.IndexOf(":")) : "ERROR";
    <div class="@alert_type">@alert_msg</div>
}

@code {
    [Parameter]
    public string GameId { get; set; }
    public string password { get; set; }
    public string Alert { get; set; }

    public string Renamed { get; set; }
    public bool JoinedGame { get; set; } = false;
    
    public Stop.Shared.Player player { get; set; } = new Player();
    public List<string> Players { get; set; }
    public List<string> Topics { get; set; }
    public Stop.Shared.Round Round { get; set; }
    public Dictionary<string, string> Answers { get; set; } = new Dictionary<string, string>();
    private HubConnection hubConnection;
    
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    public void Dispose() => _ = hubConnection.DisposeAsync();
    protected override async Task OnInitializedAsync()
    {
        // Logger.LogTrace("Init", 0);
        player.Name = await localStore.GetItemAsync<string>("player_name");
        if (QueryHelpers.ParseQuery(new Uri(NavigationManager.Uri).Query).TryGetValue("password", out var value))
        {
            password = value;
        }
        
        // Logger.LogTrace("Init", 1);
        
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/websocket")).Build();
        hubConnection.On<Stop.Shared.Game>("JoinedGame", (game) =>
        {
            if (game.Players.Last().Name == player.Name)
            {
                GameId = game.Id;
                Topics = game.Topics;
                foreach (var topic in game.Topics)
                {
                    Answers.Add(topic, "");
                    
                }
                JoinedGame = true;
                Console.WriteLine($"Joined game: {GameId}");
                StateHasChanged();
            }
        });
        // hubConnection.On<Stop.Shared.Game>("GameLoaded", (game) =>
        // {
        //     Console.WriteLine($"Game loaded: {game.Id}");
        //     Topics = game.Topics;
        //     StateHasChanged();
        // });
        hubConnection.On<Stop.Shared.Round>("RoundEnded", (round) =>
        {
            Console.WriteLine("RoundEnded");
            Round.Finished = true;
            StateHasChanged();
        });
        hubConnection.On<Stop.Shared.Round>("RoundStarted", (round) =>
        {
            Console.WriteLine($"Round Started: {round.Letter}");
            Round = round;
            Answers = new Dictionary<string, string>();
            foreach (var topic in Topics)
            {
                Answers.Add(topic, "");
            }
            //Answers = CurrentGame.Rounds.Last().Players[player.Name].Answers;
            StateHasChanged();
        });
        hubConnection.On<Stop.Shared.Game>("GameDeleted", (game) =>
        {
            GameId = null;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        
        if(!string.IsNullOrWhiteSpace(GameId) && !string.IsNullOrWhiteSpace(password) && !string.IsNullOrWhiteSpace(player.Name))
            JoinGame();
    }

    private async void ChangeAnswer(ChangeEventArgs e, string topic)
    {
        Answers[topic] = e.Value.ToString();
        Console.WriteLine($"Change answer: [{topic}] {Answers[topic]}");
        await hubConnection.InvokeAsync("SaveAnswers", GameId, player.Name, topic, Answers[topic]);
    }

    private async void JoinGame()
    {
        Console.WriteLine($"Join game: {GameId}");
        Renamed = player.Name;
        await localStore.SetItemAsync<string>("player_name", player.Name);
        await hubConnection.InvokeAsync("JoinGame", GameId, password, player);
    }

    private async void FinishRound()
    {
        Console.WriteLine($"Finish round: {player.Name}");
        await hubConnection.InvokeAsync("CloseRound",GameId, player.Name);
    }

    private async void RenamePlayer()
    {
        await hubConnection.InvokeAsync("RenamePlayer", GameId, player.Name, Renamed);
        await localStore.SetItemAsync<string>("player_name", Renamed);
    }


}
