@page "/game/{gameId}"
@using System
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Stop.Shared
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@using Microsoft.AspNetCore.WebUtilities
@inject Blazored.LocalStorage.ILocalStorageService localStore
@using Microsoft.Extensions.Logging
@inject ILogger<Stop.Shared.Game> Logger

@if (CurrentGame == null)
{
    <p><label>Join game: <input type="text" class="editable" @bind="gameId" /></label></p>
    <p><label>Password: <input type="text" class="editable" @bind="password" /></label></p>
    <p><label>Player name: <input type="text" class="editable" @bind="player.Name" /></label></p>
    <button class="btn btn-primary" @onclick="JoinGame">Join</button>
}
else if (CurrentGame.Rounds.Count == 0)
{
    <p>waiting for round to start</p>
    <p><label>Player name: <input type="text" class="editable" @bind="Renamed" /></label></p>
    <button class="btn btn-primary" @onclick="RenamePlayer">Rename</button>
}
else if (CurrentGame.Rounds.Last().Finished == false)
{
    <h1>Current Letter: <b>@CurrentGame.Rounds.Last().Letter</b></h1>
    <table class="table">
        <thead>
        <tr>
            <th>Topic</th>
            <th>Your Answer</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var topic in CurrentGame.Topics)
        {
            <tr>
                <td>@topic</td>
                <td><input type="text" class="editable" @onchange="@(e => ChangeAnswer(e, topic))" /></td>
                <td>@Answers[@topic]</td>
            </tr>
        }
        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="FinishRound">Done!</button>
}
else
{
    <h1>Round finished. Letter: <b>@CurrentGame.Rounds.Last().Letter</b></h1>
    <table>
        <thead>
        <th>Player</th>
        @foreach (var topic in CurrentGame.Topics)
        {
            <th>@topic</th>
        }
        <th>Score</th>
        </thead>
        <tbody>
        @foreach (var player in CurrentGame.Rounds.Last().Players)
        {
            <tr>
                <td>@player.Key</td>
                @foreach (var answers in player.Value.Answers)
                {
                    <td>@answers.Value.Answer</td>
                }
                <td>@player.Value.Score</td>
            </tr>
        }
        </tbody>
    </table>
}

@if (!string.IsNullOrWhiteSpace(Alert))
{
    var alert_msg = Alert.Contains(":") ? Alert.Substring(Alert.IndexOf(":") + 1) : Alert;
    var alert_type = Alert.Contains(":") ? Alert.Substring(0, Alert.IndexOf(":")) : "ERROR";
    <div class="@alert_type">@alert_msg</div>
}

@code {
    [Parameter]
    public string gameId { get; set; }
    public string password { get; set; }
    public string Alert { get; set; }

    public string Renamed { get; set; }
    
    public Stop.Shared.Player player { get; set; } = new Player();
    public Stop.Shared.Game CurrentGame { get; set; }
    public Dictionary<string, string> Answers { get; set; } = new Dictionary<string, string>();
    private HubConnection hubConnection;
    
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    public void Dispose() => _ = hubConnection.DisposeAsync();
    protected override async Task OnInitializedAsync()
    {
        // Logger.LogTrace("Init", 0);
        player.Name = await localStore.GetItemAsync<string>("player_name");
        if (QueryHelpers.ParseQuery(new Uri(NavigationManager.Uri).Query).TryGetValue("password", out var value))
        {
            password = value;
        }
        
        // Logger.LogTrace("Init", 1);
        
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/websocket")).Build();
        hubConnection.On<Stop.Shared.Game>("JoinedGame", (game) =>
        {
            if (game == null)
            {
                Alert = $"Game '{gameId}' not found";
            }
            else
            {
                CurrentGame = game;
                Answers = new Dictionary<string, string>();
                foreach (var topic in game.Topics)
                {
                    Answers.Add(topic, "");
                    
                    // Answers.Add(topic, game.Rounds[game.Rounds.Count-1].Players[player.Name].Answers[topic].Answer);
                }
                Console.WriteLine($"Joined game: {CurrentGame.Id}");
                StateHasChanged();
            }
        });
        hubConnection.On<Stop.Shared.Game>("GameLoaded", (game) =>
        {
            Console.WriteLine($"Game loaded: {game.Id}");
            CurrentGame = game;
            StateHasChanged();
        });
        hubConnection.On<Stop.Shared.Round>("RoundEnded", (round) =>
        {
            Console.WriteLine("RoundEnded");
            CurrentGame.Rounds[CurrentGame.Rounds.Count - 1] = round;
            StateHasChanged();
        });
        hubConnection.On<Stop.Shared.Game>("RoundStarted", (game) =>
        {
            Console.WriteLine($"Round Started: {game.Rounds.Last().Letter}");
            CurrentGame = game;
            Answers = new Dictionary<string, string>();
            foreach (var topic in game.Topics)
            {
                Answers.Add(topic, "");
            }
            //Answers = CurrentGame.Rounds.Last().Players[player.Name].Answers;
            StateHasChanged();
        });
        hubConnection.On<Stop.Shared.Game>("GameDeleted", (game) =>
        {
            CurrentGame = null;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        
        if(!string.IsNullOrWhiteSpace(gameId) && !string.IsNullOrWhiteSpace(password) && !string.IsNullOrWhiteSpace(player.Name))
            JoinGame();
    }

    private async void ChangeAnswer(ChangeEventArgs e, string topic)
    {
        Answers[topic] = e.Value.ToString();
        Console.WriteLine($"Change answer: [{topic}] {Answers[topic]}");
        await hubConnection.InvokeAsync("SaveAnswers", gameId, player.Name, topic, Answers[topic]);
    }

    private async void JoinGame()
    {
        Console.WriteLine($"Join game: {gameId}");
        Renamed = player.Name;
        await localStore.SetItemAsync<string>("player_name", player.Name);
        await hubConnection.InvokeAsync("JoinGame", gameId, password, player);
    }

    private async void FinishRound()
    {
        Console.WriteLine($"Finish round: {player.Name}");
        await hubConnection.InvokeAsync("CloseRound",CurrentGame.Id, player.Name);
    }

    private async void RenamePlayer()
    {
        await hubConnection.InvokeAsync("RenamePlayer", CurrentGame.Id, player.Name, Renamed);
        await localStore.SetItemAsync<string>("player_name", Renamed);
    }


}
